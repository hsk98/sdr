# Development Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: sdr_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: sdr_assignment_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sdr_assignment_system"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sdr_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdr_backend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      JWT_SECRET: dev-super-secret-jwt-key-change-in-production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sdr_assignment_system
      DB_USER: postgres
      DB_PASSWORD: postgres
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sdr_network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sdr_frontend_dev
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sdr_network

  # Nginx Reverse Proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: sdr_nginx_dev
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sdr_network

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  sdr_network:
    driver: bridge